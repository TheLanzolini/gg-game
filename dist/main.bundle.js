!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i,o=function(){function t(t,e,n){void 0===t&&(t=900),void 0===e&&(e=600),void 0===n&&(n=document.body),this.width=t,this.height=e,this.target=n}return t.prototype.createCanvas=function(){this.target=document.getElementById("canvas-wrapper")||this.target;var t=document.createElement("canvas");return t.height=this.height,t.width=this.width,this.target.appendChild(t),this.context=t.getContext("2d"),this.context},t}();!function(t){t.Top="top",t.Bottom="bottom",t.Left="left",t.Right="right"}(i||(i={}));var r,s,c=new(function(){function t(){this.canvas=new o,this.height=this.canvas.height,this.width=this.canvas.width,this.context=this.canvas.createCanvas()}return t.prototype.checkInBounds=function(t){return!(t.xPos<0||t.yPos<0||t.xPos+t.width>this.width||t.yPos+t.height>this.height)},t.prototype.checkInBoundsExceptRight=function(t){return!(t.xPos<0||t.yPos<0||t.yPos+t.height>this.height)},t.prototype.checkInBoundsDirection=function(t,e){return e===i.Top?!(t.yPos<0):e===i.Bottom?!(t.yPos+t.height>this.height):e===i.Left?!(t.xPos<0):e===i.Right&&!(t.xPos+t.width>this.width)},t.prototype.get=function(){return this.context},t}()),a=new(function(){function t(){this.queue=[]}return t.prototype.add=function(t){this.queue.push(t)},t.prototype.remove=function(t){this.queue=this.queue.filter(function(e){return e!=t})},t.prototype.render=function(){this.queue.forEach(function(t){return t.render()})},t}()),h=new(function(){function t(){this.keyDown=this.keyDown.bind(this),this.keyUp=this.keyUp.bind(this),this.controls={up:!1,down:!1,left:!1,right:!1,space:!1,p:!1},this.callbacks=[],this.keyCodes=[38,40,37,39,32,80],this.keyCodeMap={38:"up",40:"down",37:"left",39:"right",32:"space",80:"p"},this.attachListeners()}return t.prototype.subscribe=function(t){if(!this.callbacks.includes(t))return this.callbacks.push(t),this.controls},t.prototype.dispatchControls=function(){var t=this;this.callbacks.forEach(function(e){return e(t.controls)})},t.prototype.keyDown=function(t){var e=this;this.keyCodes.forEach(function(n){n===t.keyCode&&(e.controls[e.keyCodeMap[t.keyCode]]=!0)}),this.dispatchControls()},t.prototype.keyUp=function(t){var e=this;this.keyCodes.forEach(function(n){n===t.keyCode&&(e.controls[e.keyCodeMap[t.keyCode]]=!1)}),this.dispatchControls()},t.prototype.attachListeners=function(){window.addEventListener("keydown",this.keyDown),window.addEventListener("keyup",this.keyUp)},t.prototype.removeListeners=function(){window.removeEventListener("keydown",this.keyDown),window.removeEventListener("keyup",this.keyUp)},t}()),u=new(function(){function t(){var t=this;this.paused=!1,h.subscribe(function(e){e.p&&(t.paused=!t.paused,t.dispatchPause())}),this.callbacks=[],window.addEventListener("focus",function(){t.paused=!1,t.dispatchPause.bind(t)()}),window.addEventListener("blur",function(){t.paused=!0,t.dispatchPause.bind(t)()}),document.addEventListener("visibilitychange",function(){t.paused="hidden"===document.visibilityState})}return t.prototype.subscribe=function(t){if(!this.callbacks.includes(t))return this.callbacks.push(t),this.paused},t.prototype.dispatchPause=function(){var t=this;this.callbacks.forEach(function(e){return e(t.paused)})},t}()),p=function(){function t(t,e,n,i,o,r,s,c){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=10),void 0===i&&(i=10),void 0===o&&(o="black"),void 0===r&&(r="white"),void 0===s&&(s=0),void 0===c&&(c=0),this.xPos=t,this.yPos=e,this.width=n,this.height=i,this.strokeStyle=o,this.fillStyle=r,this.xSpeed=s,this.ySpeed=c}return t.prototype.render=function(){c.context.strokeStyle=this.strokeStyle,c.context.fillStyle=this.fillStyle,c.context.fillRect(this.xPos,this.yPos,this.width,this.height),c.context.strokeRect(this.xPos,this.yPos,this.width,this.height),this.xPos+=this.xSpeed,this.yPos+=this.ySpeed},t}(),f=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),d=function(t){function e(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.apply(this,e)||this}return f(e,t),e.prototype.render=function(){c.checkInBoundsExceptRight(this)?t.prototype.render.call(this):v.destroyEnemy(this)},e}(p);!function(t){t.Easy="Easy",t.Medium="Medium",t.Hard="Hard",t.Insane="Insane"}(s||(s={}));var l=new(function(){function t(){this.callbacks=[],this.difficulty=s.Easy}return t.prototype.changeDifficulty=function(t){this.difficulty=t,this.dispatchDifficulty()},t.prototype.subscribe=function(t){if(!this.callbacks.includes(t))return this.callbacks.push(t),this.difficulty},t.prototype.dispatchDifficulty=function(){var t=this;this.callbacks.forEach(function(e){return e(t.difficulty)})},t}()),y=function(){function t(t){void 0===t&&(t=1e3);var e=this;this.enemyHeight=15,this.enemyWidth=15,this.paused=!1,this.intervalTime=t,this.enemies=[],this.spawnEnemy(),this.setInterval(),this.spawnX=c.width,this.newSpawnPoint(),u.subscribe(function(t){return e.paused=t}),this.difficulties={Easy:1e3,Medium:500,Hard:250,Insane:100},l.subscribe(function(t){var n=e.difficulties[t];e.changeInterval(n)})}return t.prototype.setInterval=function(){this.interval=setInterval(this.spawnEnemy.bind(this),this.intervalTime)},t.prototype.changeInterval=function(t){this.clearInterval(),this.intervalTime=t,this.setInterval()},t.prototype.clearInterval=function(){window.clearInterval(this.interval)},t.prototype.newSpawnPoint=function(){this.spawnY=Math.round(Math.random()*(c.height-this.enemyHeight))},t.prototype.spawnEnemy=function(){if(!this.paused){var t=new d(this.spawnX,this.spawnY,this.enemyWidth,this.enemyHeight,"black","red",-5);this.enemies.push(t),a.add(t),this.newSpawnPoint()}},t.prototype.destroyEnemy=function(t){this.enemies=this.enemies.filter(function(e){return e!=t}),a.remove(t)},t}(),v=new y,w=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),b=function(t){function e(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var i=t.apply(this,e)||this;return i.threshold=50,i.y=0,i}return w(e,t),e.prototype.render=function(){this.y++,this.y===this.threshold&&(this.ySpeed=-1*this.ySpeed,this.y=0),c.checkInBoundsExceptRight(this)?t.prototype.render.call(this):g.destroyEnemy(this)},e}(d),m=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),g=new(function(t){function e(e){var n=t.call(this,e)||this;return n.difficulties={Easy:5e3,Medium:2500,Hard:1e3,Insane:500},n}return m(e,t),e.prototype.spawnEnemy=function(){if(!this.paused){var t=new b(this.spawnX,this.spawnY,this.enemyWidth,this.enemyHeight,"black","purple",-1,1),e=new b(this.spawnX,this.spawnY,this.enemyWidth,this.enemyHeight,"black","purple",-1,-1);this.enemies.push(t,e),a.add(t),a.add(e),this.newSpawnPoint()}},e}(y))(5e3),k=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),x=function(t){function e(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.apply(this,e)||this}return k(e,t),e.prototype.render=function(){c.checkInBoundsDirection(this,i.Top)||(this.yPos=0,this.ySpeed=-1*this.ySpeed),c.checkInBoundsDirection(this,i.Bottom)||(this.yPos=c.height-this.height,this.ySpeed=-1*this.ySpeed),c.checkInBoundsExceptRight(this)?t.prototype.render.call(this):P.destroyEnemy(this)},e}(d),_=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),P=new(function(t){function e(e){var n=t.call(this,e)||this;return n.enemyWidth=30,n.enemyHeight=30,n.difficulties={Easy:2e3,Medium:1500,Hard:1e3,Insane:500},n}return _(e,t),e.prototype.spawnEnemy=function(){if(!this.paused){var t=Math.round(10*Math.random())>5?-1:1,e=-3-Math.round(3*Math.random()),n=3*t+Math.round(3*Math.random()*t),i=new x(this.spawnX,this.spawnY,this.enemyWidth,this.enemyHeight,"black","yellow",e,n);this.enemies.push(i),a.add(i),this.newSpawnPoint()}},e}(y))(2e3),E=new p(0,0,c.width,c.height),I=function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),O=new(function(t){function e(){return t.call(this,20,c.height/2-10,20,20,"black","blue")||this}return I(e,t),e.prototype.render=function(){c.checkInBoundsDirection(this,i.Top)||(this.yPos=0,this.ySpeed=0),c.checkInBoundsDirection(this,i.Bottom)||(this.yPos=c.height-this.height,this.ySpeed=0),c.checkInBoundsDirection(this,i.Left)||(this.xPos=0,this.xSpeed=0),c.checkInBoundsDirection(this,i.Right)||(this.xPos=c.width-this.width,this.xSpeed=0),t.prototype.render.call(this)},e}(p));h.subscribe(function(t){O.xSpeed=t.right?5:t.left?-5:0,O.ySpeed=t.down?5:t.up?-5:0});n(5);a.add(E),a.add(O);const S=document.getElementById("pause-display"),j=document.getElementById("fps");let C=!1;l.subscribe(t=>{console.log(t)}),l.changeDifficulty(s.Insane),u.subscribe(t=>{C=t,S.classList[t?"add":"remove"]("active")});let L=0,B=0;setInterval(()=>{0;const t=L-B;j.textContent=`FPS: ${t}`,B=L},1e3),function t(){C||a.render(),L++,window.requestAnimationFrame(t)}()},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,i=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(o=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){var i,o,r={},s=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=i.apply(this,arguments)),o}),c=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,h=0,u=[],p=n(1);function f(t,e){for(var n=0;n<t.length;n++){var i=t[n],o=r[i.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](i.parts[s]);for(;s<i.parts.length;s++)o.parts.push(b(i.parts[s],e))}else{var c=[];for(s=0;s<i.parts.length;s++)c.push(b(i.parts[s],e));r[i.id]={id:i.id,refs:1,parts:c}}}}function d(t,e){for(var n=[],i={},o=0;o<t.length;o++){var r=t[o],s=e.base?r[0]+e.base:r[0],c={css:r[1],media:r[2],sourceMap:r[3]};i[s]?i[s].parts.push(c):n.push(i[s]={id:s,parts:[c]})}return n}function l(t,e){var n=c(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===t.insertAt)i?i.nextSibling?n.insertBefore(e,i.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function y(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function v(t){var e=document.createElement("style");return t.attrs.type="text/css",w(e,t.attrs),l(t,e),e}function w(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function b(t,e){var n,i,o,r;if(e.transform&&t.css){if(!(r=e.transform(t.css)))return function(){};t.css=r}if(e.singleton){var s=h++;n=a||(a=v(e)),i=k.bind(null,n,s,!1),o=k.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",w(e,t.attrs),l(t,e),e}(e),i=function(t,e,n){var i=n.css,o=n.sourceMap,r=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||r)&&(i=p(i));o&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([i],{type:"text/css"}),c=t.href;t.href=URL.createObjectURL(s),c&&URL.revokeObjectURL(c)}.bind(null,n,e),o=function(){y(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),i=function(t,e){var n=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){y(n)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return f(n,e),function(t){for(var i=[],o=0;o<n.length;o++){var s=n[o];(c=r[s.id]).refs--,i.push(c)}t&&f(d(t,e),e);for(o=0;o<i.length;o++){var c;if(0===(c=i[o]).refs){for(var a=0;a<c.parts.length;a++)c.parts[a]();delete r[c.id]}}}};var m,g=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join("\n")});function k(t,e,n,i){var o=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=g(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var o=(s=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),r=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[n].concat(r).concat([o]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},o=0;o<this.length;o++){var r=this[o][0];"number"==typeof r&&(i[r]=!0)}for(o=0;o<t.length;o++){var s=t[o];"number"==typeof s[0]&&i[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"* {\r\n  -webkit-font-smoothing: antialiased;\r\n  -mac-osx-font-smoothing: greyscale;\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n  font-family: arial, sans-serif;\r\n}\r\n\r\n#canvas-wrapper {\r\n  position: relative;\r\n}\r\n\r\n#pause-display {\r\n  display: none;\r\n}\r\n\r\n#pause-display.active {\r\n  font-family: impact;\r\n  text-transform: uppercase;\r\n  display: block;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  font-size: 72px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n",""])},function(t,e,n){var i=n(4);"string"==typeof i&&(i=[[t.i,i,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(i,o);i.locals&&(t.exports=i.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,